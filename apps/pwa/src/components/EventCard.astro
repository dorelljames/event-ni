---
import type { EventFromDB } from "../types/database";

interface Props {
  event: EventFromDB;
  variant: "upcoming" | "recent" | "past";
}

const { event, variant } = Astro.props;

// Format the date
const eventDate = new Date(event.start_time);
const day = eventDate.getDate();
const month = eventDate.toLocaleString("default", { month: "short" });
---

<a href={`/events/${event.id}`} class="block group">
  <div class="event-card bg-white rounded-xl shadow-sm overflow-hidden">
    <div class="relative">
      {
        event.cover_photo ? (
          <div class="relative aspect-[3/2] overflow-hidden">
            <img
              src={event.cover_photo}
              alt={event.name}
              class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
              loading="lazy"
              data-image-url={event.cover_photo}
            />

            <div class="absolute top-4 left-4 bg-white/95 backdrop-blur rounded-lg px-3 py-1.5 text-center shadow-md">
              <div class="text-2xl font-bold leading-none text-gray-900">
                {day}
              </div>
              <div class="text-xs font-medium text-gray-600 uppercase tracking-wider">
                {month}
              </div>
            </div>
          </div>
        ) : (
          <div class="aspect-[3/2] bg-gradient-to-br from-blue-500 to-purple-600 relative">
            <div class="absolute top-4 left-4 bg-white/95 backdrop-blur rounded-lg px-3 py-1.5 text-center">
              <div class="text-2xl font-bold leading-none text-gray-900">
                {day}
              </div>
              <div class="text-xs font-medium text-gray-600 uppercase tracking-wider">
                {month}
              </div>
            </div>
          </div>
        )
      }
    </div>

    <div class="p-4">
      <h3
        class="text-lg font-extrabold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors line-clamp-2"
      >
        {event.name}
      </h3>

      <div class="space-y-2">
        <div class="flex items-center text-sm text-gray-600">
          <svg
            class="w-4 h-4 mr-2 text-gray-400 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <time datetime={event.start_time} class="truncate">
            {
              eventDate.toLocaleTimeString(undefined, {
                hour: "numeric",
                minute: "2-digit",
                hour12: true,
              })
            }
          </time>
        </div>

        {
          event.location && (
            <div class="flex items-center text-sm text-gray-600">
              <svg
                class="w-4 h-4 mr-2 text-gray-400 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                />
              </svg>
              <span class="truncate">{event.location}</span>
            </div>
          )
        }
      </div>
    </div>
  </div>
</a>

<style>
  .event-card {
    position: relative;
    transition: all 0.3s ease;
    will-change: transform;
  }

  .event-card:hover {
    transform: translateY(-2px);
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
