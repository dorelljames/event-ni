---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import EventSkeleton from '../components/EventSkeleton.astro';
import { supabase } from '../lib/supabase';
import type { EventFromDB } from '../types/database';

// Get search params
const searchParams = new URL(Astro.request.url).searchParams;
const query = searchParams.get('q')?.trim() || '';
const startDate = searchParams.get('start') || '';
const endDate = searchParams.get('end') || '';

// Get today's date at midnight for comparison
const today = new Date();
today.setHours(0, 0, 0, 0);

// Fetch events if there's a search query
let events: EventFromDB[] | null = null;
let error = null;

console.log('Searching with query:', query); // Debug log

if (query || startDate || endDate) {
  try {
    let queryBuilder = supabase
      .from('events')
      .select('*');

    // Add search conditions if query exists
    if (query) {
      queryBuilder = queryBuilder.or(`name.ilike.%${query}%,description.ilike.%${query}%`);
    }

    // Add date filters if they exist
    if (startDate) {
      queryBuilder = queryBuilder.gte('start_time', startDate);
    }
    if (endDate) {
      queryBuilder = queryBuilder.lte('start_time', endDate);
    }

    // Execute the query
    const { data, error: searchError } = await queryBuilder.order('start_time', { ascending: false });

    if (searchError) {
      console.error('Search error:', searchError);
      throw searchError;
    }

    events = data;
    console.log('Found events:', data?.length); // Debug log

  } catch (e) {
    console.error('Search error:', e);
    error = e;
  }
}

console.log('Final search results:', { query, eventsCount: events?.length, error }); // Debug log
---

<Layout title="Search Events">
  <main class="min-h-screen bg-gray-50 pb-16 sm:pb-0">
    <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Search Events</h1>
      </header>

      <!-- Search Form -->
      <form 
        class="mb-8 space-y-4" 
        action="/search" 
        method="get" 
        id="searchForm"
        onsubmit="return validateForm(event)"
      >
        <div class="relative">
          <input
            type="search"
            name="q"
            value={query}
            placeholder="Search events..."
            class="w-full px-4 py-3 pl-12 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
            id="searchInput"
            minlength="2"
            required
          />
          <button
            type="button"
            class="absolute right-4 top-3 text-gray-400 hover:text-gray-600"
            id="voiceSearchBtn"
            aria-label="Search by voice"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
            </svg>
          </button>
          <svg 
            class="absolute left-4 top-3.5 h-5 w-5 text-gray-400"
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
        </div>

        <!-- Date Filters -->
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label for="start-date" class="block text-sm font-medium text-gray-700 mb-1">
              Start Date
            </label>
            <input
              type="date"
              id="start-date"
              name="start"
              value={startDate}
              class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label for="end-date" class="block text-sm font-medium text-gray-700 mb-1">
              End Date
            </label>
            <input
              type="date"
              id="end-date"
              name="end"
              value={endDate}
              class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
      </form>

      <!-- Recent Searches -->
      <div class="mb-8" id="recentSearches"></div>

      {error && (
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" role="alert">
          <p>Failed to load search results. Please try again.</p>
        </div>
      )}

      {(query || startDate || endDate) && !error && (
        <div class="mb-6">
          <p class="text-gray-600">
            {events?.length === 0 
              ? 'No events found' 
              : `Found ${events?.length} event${events?.length === 1 ? '' : 's'}`
            }
            {events?.length !== 0 && query && ` for "${query}"`}
            {events?.length !== 0 && (startDate || endDate) && ` in selected date range`}
          </p>
        </div>
      )}

      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {events === null && query && (
          Array(3).fill(null).map((_, i) => (
            <EventSkeleton />
          ))
        )}
        
        {events?.map((event) => (
          <article class="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden">
            {event.cover_photo && (
              <div class="aspect-[16/9] overflow-hidden">
                <img 
                  src={event.cover_photo} 
                  alt={event.name}
                  class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                />
              </div>
            )}

            <div class="p-6">
              <div class="flex justify-between items-start gap-4 mb-4">
                <h2 class="text-xl font-semibold text-gray-900 line-clamp-2">
                  <span class="bg-yellow-100">{
                    event.name.replace(new RegExp(query, 'gi'), (match) => `<mark class="bg-yellow-100 rounded px-0.5">${match}</mark>`)
                  }</span>
                </h2>
                {event.is_featured && (
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 whitespace-nowrap">
                    Featured
                  </span>
                )}
              </div>
              
              <div class="space-y-3 text-sm">
                <p class="flex items-center text-gray-600">
                  <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <span class="whitespace-normal">
                    {new Date(event.start_time).toLocaleDateString(undefined, {
                      weekday: 'long',
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                    <br />
                    <time class="text-gray-500">
                      {new Date(event.start_time).toLocaleTimeString(undefined, {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                      {event.end_time && (
                        <span> - {new Date(event.end_time).toLocaleTimeString(undefined, {
                          hour: '2-digit',
                          minute: '2-digit'
                        })}</span>
                      )}
                    </time>
                  </span>
                </p>
              </div>
              
              {event.description && (
                <p class="mt-4 text-gray-600 text-sm line-clamp-2" set:html={
                  event.description.replace(new RegExp(query, 'gi'), (match) => `<mark class="bg-yellow-100 rounded px-0.5">${match}</mark>`)
                } />
              )}
              
              <div class="mt-6">
                <a
                  href={`/events/${event.id}`}
                  class="inline-flex items-center justify-center w-full px-4 py-2.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors duration-200"
                >
                  View Details
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>

      {query && events?.length === 0 && (
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
              d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No results found</h3>
          <p class="mt-1 text-sm text-gray-500">
            Try adjusting your search terms or browse all events.
          </p>
          <div class="mt-6">
            <a href="/" class="text-sm font-medium text-blue-600 hover:text-blue-500">
              ← Back to all events
            </a>
          </div>
        </div>
      )}
    </div>
  </main>
  
  <Navigation />
</Layout>

<script>
  import { getRecentSearches, addRecentSearch } from '../store/searchStore';

  // Voice Search
  const voiceSearchBtn = document.getElementById('voiceSearchBtn');
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const searchForm = document.getElementById('searchForm') as HTMLFormElement;
  
  if ('webkitSpeechRecognition' in window) {
    const recognition = new (window as any).webkitSpeechRecognition();
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      if (searchInput) {
        searchInput.value = transcript;
        searchForm?.submit();
      }
    };

    voiceSearchBtn?.addEventListener('click', () => {
      recognition.start();
    });
  } else {
    // Handle browsers that don't support speech recognition
    const btn = voiceSearchBtn as HTMLElement;
    if (btn) {
      btn.style.display = 'none';
    }
  }

  // Recent Searches
  const recentSearchesContainer = document.getElementById('recentSearches');
  const currentQuery = new URLSearchParams(window.location.search).get('q');
  
  if (currentQuery) {
    addRecentSearch(currentQuery);
  }

  const recentSearches = getRecentSearches();
  if (recentSearches.length > 0 && recentSearchesContainer) {
    recentSearchesContainer.innerHTML = `
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <h2 class="text-sm font-medium text-gray-900">Recent Searches</h2>
          <button class="text-sm text-gray-500 hover:text-gray-700" id="clearSearches">
            Clear
          </button>
        </div>
        <div class="flex flex-wrap gap-2">
          ${recentSearches.map(search => `
            <a
              href="/search?q=${encodeURIComponent(search)}"
              class="inline-flex items-center px-3 py-1.5 rounded-full text-sm bg-gray-100 text-gray-800 hover:bg-gray-200"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              ${search}
            </a>
          `).join('')}
        </div>
      </div>
    `;
  }

  // Clear recent searches
  document.getElementById('clearSearches')?.addEventListener('click', () => {
    localStorage.removeItem('recent-searches');
    if (recentSearchesContainer) {
      recentSearchesContainer.innerHTML = '';
    }
  });

  function validateForm(event: Event) {
    const form = event.target as HTMLFormElement;
    const searchInput = form.querySelector('input[name="q"]') as HTMLInputElement;
    
    if (searchInput.value.trim().length < 2) {
      alert('Please enter at least 2 characters to search');
      event.preventDefault();
      return false;
    }
    return true;
  }
</script> 