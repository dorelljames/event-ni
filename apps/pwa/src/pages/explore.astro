---
import Layout from "../layouts/Layout.astro";
import Navigation from "../components/Navigation.astro";
import Header from "../components/Header.astro";
import { supabase } from "../lib/supabase";
import type {
  EventCategory,
  EventOrganizer,
  LocationCount,
} from "../types/database";
import SEO from "../components/SEO.astro";

// Check if the environment is production
// const isProduction = import.meta.env.PROD;
const isProduction = true;

if (isProduction) {
  // Display a WIP message in production
  const prerender = true;
  const layout = false;
}

// Background patterns for categories
const categoryPatterns = [
  "radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.2) 0%, transparent 40%)",
  "linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%)",
  "repeating-linear-gradient(-45deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.1) 2%, transparent 2%, transparent 4%)",
  "linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, transparent 100%)",
  "radial-gradient(circle at 80% 80%, rgba(255, 255, 255, 0.15) 0%, transparent 50%)",
  "linear-gradient(60deg, rgba(255, 255, 255, 0.1) 25%, transparent 75%)",
];

// Category icons mapping
const categoryIcons: Record<string, string> = {
  workshop: "<svg>...</svg>",
  conference: "<svg>...</svg>",
  meetup: "<svg>...</svg>",
  hackathon: "<svg>...</svg>",
  webinar: "<svg>...</svg>",
  other: "<svg>...</svg>",
};

// Location images mapping
const locationImages: Record<string, string> = {
  "Cebu City": "/images/locations/cebu-city.jpg",
  Mandaue: "/images/locations/mandaue.jpg",
  "Lapu-Lapu": "/images/locations/lapu-lapu.jpg",
  default: "/images/locations/default.jpg",
};

const exploreJsonLd = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  name: "Explore Tech Events in Cebu",
  description:
    "Find workshops, conferences, meetups, and more tech events in Cebu",
  provider: {
    "@type": "Organization",
    name: "Cebby",
    url: Astro.url.origin,
    logo: new URL("/icons/icon-512x512.png", Astro.url).toString(),
  },
  about: {
    "@type": "Thing",
    name: "Tech Events",
  },
  breadcrumb: {
    "@type": "BreadcrumbList",
    itemListElement: [
      {
        "@type": "ListItem",
        position: 1,
        name: "Home",
        item: Astro.url.origin,
      },
      {
        "@type": "ListItem",
        position: 2,
        name: "Explore",
        item: Astro.url.href,
      },
    ],
  },
};
---

<Layout>
  <head>
    <SEO
      title="Explore All Tech Events in Cebu | cebby"
      description="Discover workshops, conferences, meetups, and more tech events happening in Cebu"
    />

    {/* Add JSON-LD Schema markup */}
    <script
      type="application/ld+json"
      set:html={JSON.stringify(exploreJsonLd)}
    />
  </head>
  <Header
    showSearch={false}
    title="Explore"
    subtitle="Find your next tech event"
  />

  {
    !isProduction && (
      <main class="min-h-screen bg-gray-50 pb-16 sm:pb-0">
        <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Hero Search Section */}

          {/* Browse by Category */}
          <section class="mb-16">
            <h2 class="text-xl font-semibold text-gray-900 mb-6">
              Browse by Category
            </h2>
            <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-4">
              {[
                { id: 1, name: "Workshops", slug: "workshop", event_count: 12 },
                {
                  id: 2,
                  name: "Conferences",
                  slug: "conference",
                  event_count: 8,
                },
                { id: 3, name: "Meetups", slug: "meetup", event_count: 15 },
                {
                  id: 4,
                  name: "Hackathons",
                  slug: "hackathon",
                  event_count: 5,
                },
                { id: 5, name: "Webinars", slug: "webinar", event_count: 10 },
                { id: 6, name: "Other", slug: "other", event_count: 3 },
              ].map((category, index) => (
                <a
                  href={`/explore?category=${category.id}`}
                  class="group relative aspect-square bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl overflow-hidden hover:scale-105 transition-all duration-300 shadow-sm hover:shadow-xl"
                  style={`background-image: ${categoryPatterns[index % categoryPatterns.length]}`}
                >
                  <div class="absolute inset-0 bg-black/10 group-hover:bg-black/20 transition-colors duration-300" />
                  <div class="absolute inset-0 p-4 flex flex-col items-center justify-center text-center">
                    <div class="w-12 h-12 mb-3 text-white/90">
                      {categoryIcons[category.slug] || categoryIcons.other}
                    </div>
                    <h3 class="text-white font-medium text-sm group-hover:scale-105 transition-transform duration-300">
                      {category.name}
                    </h3>
                    <p class="text-white/80 text-xs mt-1">
                      {category.event_count} events
                    </p>
                  </div>
                </a>
              ))}
            </div>
          </section>

          {/* Popular Locations */}
          <section class="mb-16">
            <h2 class="text-xl font-semibold text-gray-900 mb-6">
              Popular Locations
            </h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {[
                { location: "Cebu City", count: 20 },
                { location: "Mandaue", count: 15 },
                { location: "Lapu-Lapu", count: 10 },
              ].map((location) => (
                <a
                  href={`/explore?location=${encodeURIComponent(location.location)}`}
                  class="group relative h-40 rounded-xl overflow-hidden shadow-sm hover:shadow-xl transition-all duration-300"
                >
                  <img
                    src={
                      locationImages[location.location] ||
                      locationImages.default
                    }
                    alt={location.location}
                    class="absolute inset-0 w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                  />
                  <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent" />
                  <div class="absolute inset-0 p-6 flex flex-col justify-end">
                    <h3 class="text-white font-medium text-lg group-hover:translate-x-2 transition-transform duration-300">
                      {location.location}
                    </h3>
                    <p class="text-white/80 text-sm group-hover:translate-x-2 transition-transform duration-300 delay-75">
                      {location.count} upcoming events
                    </p>
                  </div>
                </a>
              ))}
            </div>
          </section>

          {/* Featured Organizers */}
          <section>
            <h2 class="text-xl font-semibold text-gray-900 mb-6">
              Featured Organizers
            </h2>
            <div class="grid grid-cols-2 sm:grid-cols-4 gap-6">
              {[
                {
                  id: 1,
                  name: "Tech Org 1",
                  logo: "/images/org1.jpg",
                  event_count: 5,
                },
                {
                  id: 2,
                  name: "Tech Org 2",
                  logo: "/images/org2.jpg",
                  event_count: 8,
                },
                {
                  id: 3,
                  name: "Tech Org 3",
                  logo: "/images/org3.jpg",
                  event_count: 3,
                },
                {
                  id: 4,
                  name: "Tech Org 4",
                  logo: "/images/org4.jpg",
                  event_count: 7,
                },
              ].map((organizer) => (
                <a
                  href={`/organizers/${organizer.id}`}
                  class="group bg-white rounded-xl p-6 text-center border border-gray-200 hover:shadow-xl transition-all duration-300 hover:-translate-y-1"
                >
                  <div class="relative inline-block">
                    <img
                      src={organizer.logo}
                      alt={organizer.name}
                      class="w-20 h-20 mx-auto rounded-full object-cover ring-4 ring-white group-hover:ring-blue-50 transition-all duration-300"
                    />
                    <div class="absolute inset-0 rounded-full bg-gradient-to-tr from-blue-500 to-indigo-500 opacity-0 group-hover:opacity-10 transition-opacity duration-300" />
                  </div>
                  <h3 class="font-medium text-gray-900 mt-4 mb-1 group-hover:text-blue-600 transition-colors duration-200">
                    {organizer.name}
                  </h3>
                  <p class="text-sm text-gray-500">
                    {organizer.event_count} events
                  </p>
                </a>
              ))}
            </div>
          </section>
        </div>
      </main>
    )
  }

  {
    isProduction && (
      <div class="flex p-4 items-center justify-center ">
        <div class="text-center p-8 rounded-lg shadow-lg bg-white-100">
          <svg
            class="w-16 h-16 mx-auto mb-4 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 16h-1v-4h-1m1-4h.01M12 18.5a6.5 6.5 0 100-13 6.5 6.5 0 000 13z"
            />
          </svg>
          <h2 class="text-lg font-semibold text-gray-800 mb-2">
            Something awesome is coming soon here!
          </h2>
          <p class="text-sm text-gray-600">
            We're working hard to bring you this page. Please check back later.
          </p>
        </div>
      </div>
    )
  }

  <Navigation />
</Layout>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
  }

  .bg-grid-white {
    background-image: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.1) 1px,
        transparent 1px
      ),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
  }
</style>

<script>
  function initializeFilters() {
    const quickFilters = document.querySelectorAll(".quick-filter");
    const searchInput = document.getElementById(
      "explore-search"
    ) as HTMLInputElement;
    const resultsContainer = document.querySelector("main");

    quickFilters.forEach((filter) => {
      filter.addEventListener("click", async (e) => {
        // Remove active state from all filters
        quickFilters.forEach((f) => {
          f.classList.remove("bg-blue-600", "text-white");
          f.classList.add("bg-white", "text-gray-700");
        });

        // Add active state to clicked filter
        const button = e.currentTarget as HTMLButtonElement;
        button.classList.remove("bg-white", "text-gray-700");
        button.classList.add("bg-blue-600", "text-white");

        // Get filter value
        const filterValue = button.dataset.filter;

        try {
          // Show loading state
          if (resultsContainer) {
            resultsContainer.classList.add("opacity-50");
          }

          // Fetch filtered results
          const response = await fetch(`/api/explore?filter=${filterValue}`);
          const data = await response.json();

          // Update URL without page reload
          const url = new URL(window.location.href);
          url.searchParams.set("filter", filterValue || "");
          window.history.pushState({}, "", url);

          // Handle the results
          // You'll need to implement this based on how you want to display the results
          console.log("Filtered results:", data);

          // TODO: Update the UI with the filtered results
        } catch (error) {
          console.error("Filter error:", error);
        } finally {
          // Remove loading state
          if (resultsContainer) {
            resultsContainer.classList.remove("opacity-50");
          }
        }
      });
    });

    // Check URL params on load to set active filter
    const url = new URL(window.location.href);
    const activeFilter = url.searchParams.get("filter");
    if (activeFilter) {
      const activeButton = document.querySelector(
        `[data-filter="${activeFilter}"]`
      );
      if (activeButton) {
        activeButton.classList.remove("bg-white", "text-gray-700");
        activeButton.classList.add("bg-blue-600", "text-white");
      }
    }
  }

  // Initialize on page load
  initializeFilters();

  // Initialize when navigating with View Transitions
  document.addEventListener("astro:page-load", initializeFilters);
</script>
