---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";
import type { EventFromDB } from "../types/database";
import Header from "../components/Header.astro";
import Navigation from "../components/Navigation.astro";
import SEO from "../components/SEO.astro";
import {
  format,
  startOfMonth,
  endOfMonth,
  eachDayOfInterval,
  isSameDay,
  addDays,
} from "date-fns";
import { formatInTimeZone } from "date-fns-tz";

// Get current date info in Manila time
const today = new Date();
const currentMonth = today.getMonth();
const currentYear = today.getFullYear();

// Get first and last day of current month
const firstDayOfMonth = startOfMonth(today);
const lastDayOfMonth = endOfMonth(today);

// Format dates for Supabase query
const startDate = format(firstDayOfMonth, "yyyy-MM-dd");
const endDate = format(lastDayOfMonth, "yyyy-MM-dd");

// Fetch events from Supabase for current month
const { data: events = [] } = await supabase
  .from("events")
  .select("*")
  .gte("start_time", `${startDate}T00:00:00+00:00`)
  .lte("start_time", `${endDate}T23:59:59+00:00`)
  .order("start_time", { ascending: true });

// Group events by date considering Manila timezone
const eventsByDate =
  events?.reduce((acc: Record<string, EventFromDB[]>, event) => {
    // Convert UTC time to Manila time
    const eventDate = formatInTimeZone(
      new Date(event.start_time),
      "Asia/Manila",
      "yyyy-MM-dd"
    );

    if (!acc[eventDate]) {
      acc[eventDate] = [];
    }
    acc[eventDate].push(event);
    return acc;
  }, {}) ?? {};

// Generate calendar data
function generateCalendarDays(month: number, year: number) {
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);

  const days = eachDayOfInterval({
    start: firstDay,
    end: lastDay,
  });

  const startPadding = firstDay.getDay();
  const paddingDays = Array(startPadding).fill(null);

  return [...paddingDays, ...days];
}

// Get events for current month
function getEventsForDay(date: Date): EventFromDB[] {
  const dateStr = format(date, "yyyy-MM-dd");
  return eventsByDate[dateStr] || [];
}

const calendarDays = generateCalendarDays(currentMonth, currentYear);
const currentMonthName = format(today, "MMMM");

const metaDescription =
  "View all tech events in Cebu in a calendar format. Plan ahead and never miss an upcoming tech event.";

// Add this helper function near your other functions
function getEventColor(eventType: string = "default") {
  const colors = {
    default: {
      bg: "bg-purple-100",
      text: "text-purple-800",
      hover: "hover:bg-purple-200",
    },
    workshop: {
      bg: "bg-indigo-100",
      text: "text-indigo-800",
      hover: "hover:bg-indigo-200",
    },
    conference: {
      bg: "bg-fuchsia-100",
      text: "text-fuchsia-800",
      hover: "hover:bg-fuchsia-200",
    },
    meetup: {
      bg: "bg-violet-100",
      text: "text-violet-800",
      hover: "hover:bg-violet-200",
    },
  };
  return colors[eventType as keyof typeof colors] || colors.default;
}
---

<Layout>
  <Fragment slot="head">
    <SEO
      title="Calendar - Tech Events in Cebu"
      description={metaDescription}
      image="/default-og-image.jpg"
      type="website"
    />
  </Fragment>

  <main class="min-h-screen pb-16 sm:pb-0">
    <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">
          {currentMonthName}
          {currentYear}
        </h1>

        <a href="/">
          <img src="/logo.svg" alt="{title}" class="h-12 w-auto" />
        </a>

        <div class="flex gap-8 items-center">
          <button
            id="downloadBtn"
            class="bg-[#8234E6] hover:bg-[#6c2bc0] text-white px-4 py-2 rounded-lg transition-colors duration-150"
          >
            Download Calendar
          </button>
        </div>
      </div>

      <div
        id="calendar-container"
        class="bg-white rounded-lg shadow-lg p-6 relative"
      >
        <div class="grid grid-cols-7 gap-2 mb-4">
          {
            ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
              <div class="text-center font-semibold text-gray-600">{day}</div>
            ))
          }
        </div>

        <div class="grid grid-cols-7 gap-2">
          {
            calendarDays.map((day) => {
              if (!day) {
                return <div class="h-48 bg-gray-50 rounded-lg" />;
              }

              const dayEvents = getEventsForDay(day);
              const isToday = isSameDay(day, today);
              const dayNumber = format(day, "d");
              const isWeekend = [0, 6].includes(day.getDay());

              return (
                <div
                  class={`h-48 rounded-lg border overflow-hidden ${
                    isToday
                      ? "border-[#8234E6] border-2"
                      : isWeekend
                        ? "border-gray-100 bg-gray-50"
                        : "border-gray-200"
                  }`}
                >
                  <div
                    class={`p-1 ${
                      isToday
                        ? "bg-[#8234E6] text-white"
                        : "bg-gray-50 text-gray-600"
                    }`}
                  >
                    <span class={`text-sm ${isToday ? "font-bold" : ""}`}>
                      {dayNumber}
                    </span>
                  </div>
                  <div class="p-1 space-y-1.5 overflow-y-auto max-h-[calc(100%-2rem)]">
                    {dayEvents.map((event) => {
                      const eventTime = formatInTimeZone(
                        new Date(event.start_time),
                        "Asia/Manila",
                        "h:mm a"
                      );
                      const eventColors = getEventColor(event.type);

                      return (
                        <a
                          href={`/events/${event.id}`}
                          class={`block text-xs ${eventColors.bg} ${eventColors.hover} 
                            ${eventColors.text} rounded-md transition-all duration-150 
                            hover:shadow-md hover:scale-[1.02] transform`}
                        >
                          <div class="flex items-center gap-2 p-1.5">
                            {event.cover_photo && (
                              <div class="relative h-12 w-12 flex-shrink-0 overflow-hidden rounded-md">
                                <img
                                  src={event.cover_photo}
                                  alt={event.name}
                                  class="absolute inset-0 w-full h-full object-cover"
                                />
                                <div class="absolute inset-0 bg-black bg-opacity-10" />
                              </div>
                            )}
                            <div class="min-w-0 flex-1">
                              <div class="font-medium truncate">
                                {event.name}
                              </div>
                              <div class="text-[10px] opacity-75 flex items-center gap-1">
                                <svg
                                  xmlns="http://www.w3.org/2000/svg"
                                  class="h-3 w-3"
                                  viewBox="0 0 20 20"
                                  fill="currentColor"
                                >
                                  <path
                                    fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                                    clip-rule="evenodd"
                                  />
                                </svg>
                                {eventTime}
                              </div>
                              {event.is_online && (
                                <span class="inline-block text-[10px] bg-green-100 text-green-800 px-1.5 rounded mt-0.5">
                                  Online
                                </span>
                              )}
                            </div>
                          </div>
                        </a>
                      );
                    })}
                  </div>
                </div>
              );
            })
          }
        </div>

        <div class="mt-6 flex justify-center">
          <div class="text-sm text-[#8234E6]">Created with ❤️ by cebby</div>
        </div>
      </div>
    </div>
  </main>

  <Navigation />

  <script>
    // @ts-ignore
    import html2canvas from "html2canvas";
    import { format } from "date-fns";

    document
      .getElementById("downloadBtn")
      ?.addEventListener("click", async () => {
        const calendar = document.getElementById("calendar-container");
        if (!calendar) return;

        try {
          const canvas = await html2canvas(calendar);
          const image = canvas.toDataURL("image/png");

          const link = document.createElement("a");
          link.download = `calendar-${format(new Date(), "yyyy-MM-dd")}.png`;
          link.href = image;
          link.click();
        } catch (error) {
          console.error("Error generating calendar image:", error);
        }
      });
  </script>
</Layout>
