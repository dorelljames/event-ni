---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import EventSkeleton from '../components/EventSkeleton.astro';
import { supabase } from '../lib/supabase';
import type { EventFromDB } from '../types/database';
import Header from '../components/Header.astro';

// Get today's date at midnight for comparison
const today = new Date();
today.setHours(0, 0, 0, 0);

// Get date 30 days ago
const thirtyDaysAgo = new Date();
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
thirtyDaysAgo.setHours(0, 0, 0, 0);

// Fetch events from Supabase
const { data: allEvents, error } = await supabase
  .from('events')
  .select(`*`)
  .order('start_time', { ascending: false }) as { data: EventFromDB[] | null, error: any };

// Split and sort events into upcoming, recent, and past
const events = allEvents?.reduce((acc, event) => {
  const eventDate = new Date(event.start_time);
  if (eventDate >= today) {
    acc.upcoming.push(event);
  } else if (eventDate >= thirtyDaysAgo) {
    acc.recent.push(event);
  } else {
    acc.past.push(event);
  }
  return acc;
}, { 
  upcoming: [] as EventFromDB[], 
  recent: [] as EventFromDB[],
  past: [] as EventFromDB[] 
});

// Sort upcoming events by nearest date first
events?.upcoming.sort((a, b) => new Date(a.start_time).getTime() - new Date(b.start_time).getTime());
// Sort recent events by most recent first
events?.recent.sort((a, b) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime());
// Sort past events by most recent first
events?.past.sort((a, b) => new Date(b.start_time).getTime() - new Date(a.start_time).getTime());

if (error) {
  console.error('Error fetching events:', error);
}
---

<Layout>
  <Header />
  
  <main class="min-h-screen bg-gray-50 pb-16 sm:pb-0">
    <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      {error && (
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6" role="alert">
          <p>Failed to load events. Please try again later.</p>
        </div>
      )}

      {/* Upcoming Events Section */}
      {events?.upcoming.length ? (
        <div class="mb-12">
          <h2 class="text-xl font-semibold text-gray-900 mb-6">Upcoming Events</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {events.upcoming.map((event: EventFromDB) => (
              <article class="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden">
                {event.cover_photo && (
                  <div class="aspect-[16/9] overflow-hidden">
                    <img 
                      src={event.cover_photo} 
                      alt={event.name}
                      class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex justify-between items-start gap-4 mb-4">
                    <div>
                      <h3 class="text-xl font-semibold text-gray-900 line-clamp-2">
                        {event.name}
                      </h3>
                    </div>
                    {event.is_featured && (
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 whitespace-nowrap">
                        Featured
                      </span>
                    )}
                  </div>
                  
                  <div class="space-y-3 text-sm">
                    <p class="flex items-center text-gray-600">
                      <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span class="whitespace-normal">
                        {new Date(event.start_time).toLocaleDateString(undefined, {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                        <br />
                        <time class="text-gray-500">
                          {new Date(event.start_time).toLocaleTimeString(undefined, {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                          {event.end_time && (
                            <span> - {new Date(event.end_time).toLocaleTimeString(undefined, {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}</span>
                          )}
                        </time>
                      </span>
                    </p>
                  </div>
                  
                  {event.description && (
                    <p class="mt-4 text-gray-600 text-sm line-clamp-2">{event.description}</p>
                  )}
                  
                  <div class="mt-6">
                    <a
                      href={`/events/${event.id}`}
                      class="inline-flex items-center justify-center w-full px-4 py-3.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors duration-200"
                    >
                      View Details
                      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
      ) : null}

      {/* Recent Events Section */}
      {events?.recent.length ? (
        <div class="mb-12">
          <h2 class="text-xl font-semibold text-gray-900 mb-6">Recent Events</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {events.recent.map((event: EventFromDB) => (
              <article class="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden opacity-90">
                {event.cover_photo && (
                  <div class="aspect-[16/9] overflow-hidden">
                    <img 
                      src={event.cover_photo} 
                      alt={event.name}
                      class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex justify-between items-start gap-4 mb-4">
                    <h3 class="text-xl font-semibold text-gray-900 line-clamp-2">
                      {event.name}
                    </h3>
                    {event.is_featured && (
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 whitespace-nowrap">
                        Featured
                      </span>
                    )}
                  </div>
                  
                  <div class="space-y-3 text-sm">
                    <p class="flex items-center text-gray-600">
                      <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span class="whitespace-normal">
                        {new Date(event.start_time).toLocaleDateString(undefined, {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </span>
                    </p>
                  </div>
                  
                  {event.description && (
                    <p class="mt-4 text-gray-600 text-sm line-clamp-2">{event.description}</p>
                  )}
                  
                  <div class="mt-6">
                    <a
                      href={`/events/${event.id}`}
                      class="inline-flex items-center justify-center w-full px-4 py-2.5 text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors duration-200"
                    >
                      View Details
                      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
      ) : null}

      {/* Past Events Section */}
      {events?.past.length ? (
        <div>
          <h2 class="text-xl font-semibold text-gray-900 mb-6">Past Events</h2>
          <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
            {events.past.map((event: EventFromDB) => (
              <article class="bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden">
                {event.cover_photo && (
                  <div class="aspect-[16/9] overflow-hidden">
                    <img 
                      src={event.cover_photo} 
                      alt={event.name}
                      class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
                      loading="lazy"
                    />
                  </div>
                )}

                <div class="p-6">
                  <div class="flex justify-between items-start gap-4 mb-4">
                    <div>
                      <h3 class="text-xl font-semibold text-gray-900 line-clamp-2">
                        {event.name}
                      </h3>
                    </div>
                    {event.is_featured && (
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 whitespace-nowrap">
                        FeaturedIs
                      </span>
                    )}
                  </div>
                  
                  <div class="space-y-3 text-sm">
                    <p class="flex items-center text-gray-600">
                      <svg class="w-4 h-4 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <span class="whitespace-normal">
                        {new Date(event.start_time).toLocaleDateString(undefined, {
                          weekday: 'long',
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                        <br />
                        <time class="text-gray-500">
                          {new Date(event.start_time).toLocaleTimeString(undefined, {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                          {event.end_time && (
                            <span> - {new Date(event.end_time).toLocaleTimeString(undefined, {
                              hour: '2-digit',
                              minute: '2-digit'
                            })}</span>
                          )}
                        </time>
                      </span>
                    </p>
                  </div>
                  
                  {event.description && (
                    <p class="mt-4 text-gray-600 text-sm line-clamp-2">{event.description}</p>
                  )}
                  
                  <div class="mt-6">
                    <a
                      href={`/events/${event.id}`}
                      class="inline-flex items-center justify-center w-full px-4 py-3.5 text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 rounded-lg transition-colors duration-200"
                    >
                      View Details
                      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  </div>
                </div>
              </article>
            ))}
          </div>
        </div>
      ) : null}

      {(!events?.upcoming.length && !events?.recent.length && !events?.past.length) && (
        <div class="text-center py-12">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
              d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No events found</h3>
          <p class="mt-1 text-sm text-gray-500">Check back later for upcoming events.</p>
        </div>
      )}
    </div>
  </main>
  
  <Navigation />
</Layout>
